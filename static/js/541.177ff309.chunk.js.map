{"version":3,"file":"static/js/541.177ff309.chunk.js","mappings":"mKAqCA,UAhCa,WACX,IAAQA,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAsCE,EAAAA,EAAAA,UAAS,MAA/C,eAAOC,EAAP,KAAoBC,EAApB,KAMA,OAJAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAeN,EAAI,WAAWO,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcJ,EAAeI,EAA7B,GACpC,GAAE,CAACR,KAGF,+BACE,wBACGG,GACCA,EAAYM,KAAI,SAAAC,GACd,OACE,yBACE,gBACEC,IACED,EAAME,aAAN,0CACuCF,EAAME,cACzCC,EAENC,IAAKJ,EAAMK,cACXC,MAAM,SARDN,EAAMV,GAYlB,OAIV,C,sBCnCD,SAASiB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOnB,KAAKc,EAAOC,EAEvC,CAEe,SAASQ,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIN,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMa,EAAGK,MAAMJ,EAAME,GAEzB,SAASb,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOe,GACdpB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASe,EACnE,CAEAhB,OAAMiB,EACR,GACF,CACF,C,+HClCMC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,cAAO,wGACWC,MAAM,2DAAD,OACwCF,IAFxD,cACCG,EADD,gBAIqBA,EAAEC,OAJvB,uBAIGC,EAJH,EAIGA,QAJH,kBAKEA,GALF,kEAQA,SAAeC,EAAtB,+CAAO,OAAP,cAAO,WAA0B7C,GAA1B,yFACWyC,MAAM,sCAAD,OACmBzC,EADnB,oBACiCuC,IAFjD,cACCG,EADD,gBAIiBA,EAAEC,OAJnB,cAICC,EAJD,yBAKEA,GALF,kEAQA,SAAetC,EAAtB,iDAAO,OAAP,cAAO,WAA8BN,EAAI8C,GAAlC,yFACaL,MAAM,sCAAD,OACqBzC,EADrB,YAC2B8C,EAD3B,oBAC2CP,EAD3C,oBADlB,cACGG,EADH,gBAIqBA,EAAEC,OAJvB,cAIKC,EAJL,yBAKMA,GALN,kEASA,SAAeG,EAAtB,+CAAO,OAAP,cAAO,WAAgCC,GAAhC,yFACaP,MAAM,qDAAD,OACoCF,EADpC,kBACqDS,EADrD,+CADlB,cACGN,EADH,gBAIqBA,EAAEC,OAJvB,cAIKC,EAJL,yBAKMA,GALN,kE","sources":["components/Cast/Cast.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","components/FetchMovies/fetchMovies.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { fetchMovieType } from 'components/FetchMovies/fetchMovies';\nimport { useParams } from 'react-router-dom';\nimport noImage from '../images/NoImageFound.jpg';\n\nconst Cast = () => {\n  const { id } = useParams();\n  const [movieActors, setMovieActors] = useState(null);\n\n  useEffect(() => {\n    fetchMovieType(id, 'credits').then(({ cast }) => setMovieActors(cast));\n  }, [id]);\n\n  return (\n    <>\n      <ul>\n        {movieActors &&\n          movieActors.map(actor => {\n            return (\n              <li key={actor.id}>\n                <img\n                  src={\n                    actor.profile_path\n                      ? `https://image.tmdb.org/t/p/w500/${actor.profile_path}`\n                      : noImage\n                  }\n                  alt={actor.original_name}\n                  width=\"120\"\n                />\n              </li>\n            );\n          })}\n      </ul>\n    </>\n  );\n};\n\nexport default Cast;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","const API_KEY = 'f337b3367ff87f6c35f27ef8641676b2'\n\nexport async function fetchTrendingMovies() {\n  const r = await fetch(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n  );\n  const { results } = await r.json();\n  return results;\n}\n\nexport async function fetchMovie(id) {\n  const r = await fetch(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}`\n  );\n  const results = await r.json();\n  return results;\n}\n\nexport async function fetchMovieType(id, type) {\n    const r = await fetch(\n        `https://api.themoviedb.org/3/movie/${id}/${type}?api_key=${API_KEY}&language=en-US`\n      );\n      const results = await r.json();\n      return results;\n    \n} \n\nexport async function fetchMovieByName(name) {\n    const r = await fetch(\n        `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${name}&language=en-US&page=1&include_adult=false`\n      )\n      const results = await r.json();\n      return results;\n    \n} \n"],"names":["id","useParams","useState","movieActors","setMovieActors","useEffect","fetchMovieType","then","cast","map","actor","src","profile_path","noImage","alt","original_name","width","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","API_KEY","fetchTrendingMovies","fetch","r","json","results","fetchMovie","type","fetchMovieByName","name"],"sourceRoot":""}